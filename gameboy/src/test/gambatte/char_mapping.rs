pub const CHAR_0: u64 = 0b0000000001111111010000010100000101000001010000010100000101111111;
pub const CHAR_1: u64 = 0b0000000000001000000010000000100000001000000010000000100000001000;
pub const CHAR_2: u64 = 0b0000000001111111000000010000000101111111010000000100000001111111;
pub const CHAR_3: u64 = 0b0000000001111111000000010000000100111111000000010000000101111111;
pub const CHAR_4: u64 = 0b0000000001000001010000010100000101111111000000010000000100000001;
pub const CHAR_5: u64 = 0b0000000001111111010000000100000001111110000000010000000101111110;
pub const CHAR_6: u64 = 0b0000000001111111010000000100000001111111010000010100000101111111;
pub const CHAR_7: u64 = 0b0000000001111111000000010000001000000100000010000001000000010000;
pub const CHAR_8: u64 = 0b0000000000111110010000010100000100111110010000010100000100111110;
pub const CHAR_9: u64 = 0b0000000001111111010000010100000101111111000000010000000101111111;
pub const CHAR_A: u64 = 0b0000000000001000001000100100000101111111010000010100000101000001;
pub const CHAR_B: u64 = 0b0000000001111110010000010100000101111110010000010100000101111110;
pub const CHAR_C: u64 = 0b0000000000111110010000010100000001000000010000000100000100111110;
pub const CHAR_D: u64 = 0b0000000001111110010000010100000101000001010000010100000101111110;
pub const CHAR_E: u64 = 0b0000000001111111010000000100000001111111010000000100000001111111;
pub const CHAR_F: u64 = 0b0000000001111111010000000100000001111111010000000100000001000000;

pub fn to_char(val: u64) -> Option<char> {
	match val {
		CHAR_0 => Some('0'),
		CHAR_1 => Some('1'),
		CHAR_2 => Some('2'),
		CHAR_3 => Some('3'),
		CHAR_4 => Some('4'),
		CHAR_5 => Some('5'),
		CHAR_6 => Some('6'),
		CHAR_7 => Some('7'),
		CHAR_8 => Some('8'),
		CHAR_9 => Some('9'),
		CHAR_A => Some('A'),
		CHAR_B => Some('B'),
		CHAR_C => Some('C'),
		CHAR_D => Some('D'),
		CHAR_E => Some('E'),
		CHAR_F => Some('F'),
		0 => Some('_'),
		v => {
			let v = format!("{v:064b}");
			panic!("{v}")
		}
	}
}
