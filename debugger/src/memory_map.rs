#[derive(Debug)]
#[allow(clippy::upper_case_acronyms)]
pub enum IORegister {
	DIV,
	TIMA,
	TMA,
	TAC,
	NR10,
	NR11,
	NR12,
	NR14,
	NR21,
	NR22,
	NR24,
	NR30,
	NR31,
	NR32,
	NR33,
	NR41,
	NR42,
	NR43,
	NR44,
	NR50,
	NR51,
	NR52,
	LCDC,
	STAT,
	SCY,
	SCX,
	LY,
	LYC,
	DMA,
	BGP,
	OBP0,
	OBP1,
	WY,
	WX,
	SB,
	SC,
	IF,
}

#[derive(Debug)]
pub enum AddressRange {
	RomBank0,
	RomBankN,
	VRam,
	ExternalRam,
	WRamBank0,
	WRamBankN,
	Mirror,
	SpriteAttributes,
	Unusable,
	#[allow(unused)]
	IORegister(IORegister),
	IORegisterUnused,
	HighRam,
	InterruptEnable,
}

fn map_addr_to_named_range(addr: u16) -> AddressRange {
	use AddressRange as AR;
	use IORegister as IO;

	match addr {
		0x0000..0x4000 => AR::RomBank0,
		0x4000..0x8000 => AR::RomBankN,
		0x8000..0xA000 => AR::VRam,
		0xA000..0xC000 => AR::ExternalRam,
		0xC000..0xD000 => AR::WRamBank0,
		0xD000..0xE000 => AR::WRamBankN,
		0xE000..0xFE00 => AR::Mirror,
		0xFE00..0xFEA0 => AR::SpriteAttributes,
		0xFEA0..0xFF00 => AR::Unusable,
		0xFF04 => AR::IORegister(IO::DIV),
		0xFF05 => AR::IORegister(IO::TIMA),
		0xFF06 => AR::IORegister(IO::TMA),
		0xFF07 => AR::IORegister(IO::TAC),
		0xFF10 => AR::IORegister(IO::NR10),
		0xFF11 => AR::IORegister(IO::NR11),
		0xFF12 => AR::IORegister(IO::NR12),
		0xFF14 => AR::IORegister(IO::NR14),
		0xFF16 => AR::IORegister(IO::NR21),
		0xFF17 => AR::IORegister(IO::NR22),
		0xFF19 => AR::IORegister(IO::NR24),
		0xFF1A => AR::IORegister(IO::NR30),
		0xFF1B => AR::IORegister(IO::NR31),
		0xFF1C => AR::IORegister(IO::NR32),
		0xFF1E => AR::IORegister(IO::NR33),
		0xFF20 => AR::IORegister(IO::NR41),
		0xFF21 => AR::IORegister(IO::NR42),
		0xFF22 => AR::IORegister(IO::NR43),
		0xFF23 => AR::IORegister(IO::NR44),
		0xFF24 => AR::IORegister(IO::NR50),
		0xFF25 => AR::IORegister(IO::NR51),
		0xFF26 => AR::IORegister(IO::NR52),
		0xFF40 => AR::IORegister(IO::LCDC),
		0xFF41 => AR::IORegister(IO::STAT),
		0xFF42 => AR::IORegister(IO::SCY),
		0xFF43 => AR::IORegister(IO::SCX),
		0xFF44 => AR::IORegister(IO::LY),
		0xFF45 => AR::IORegister(IO::LYC),
		0xFF46 => AR::IORegister(IO::DMA),
		0xFF47 => AR::IORegister(IO::BGP),
		0xFF48 => AR::IORegister(IO::OBP0),
		0xFF49 => AR::IORegister(IO::OBP1),
		0xFF4A => AR::IORegister(IO::WY),
		0xFF4B => AR::IORegister(IO::WX),
		0xFF01 => AR::IORegister(IO::SB),
		0xFF02 => AR::IORegister(IO::SC),
		0xFF0F => AR::IORegister(IO::IF),
		0xFF00..0xFF80 => AR::IORegisterUnused,
		0xFF80..0xFFFE => AR::HighRam,
		_ => AR::InterruptEnable,
	}
}

pub fn get_addr_info(addr: u16) -> (AddressRange, Option<&'static str>) {
	let range = map_addr_to_named_range(addr);
	(range, None)
}
