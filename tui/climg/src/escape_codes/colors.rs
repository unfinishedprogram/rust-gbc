use std::simd::{num::SimdUint, u8x4};
extern crate test;
use super::ESC;
use lazy_static::lazy_static;

pub fn get_closest_color_code(r: u8, g: u8, b: u8) -> u8 {
    let other = u8x4::from([r, g, b, 0]);
    let mut closest: usize = 0;
    let mut min = u32::MAX;

    for (index, color) in COLORS.into_iter().enumerate() {
        let diff = color.saturating_sub(other) | other.saturating_sub(color);
        let diff = diff.cast::<u32>();
        let diff = diff * diff;
        let diff = diff.reduce_sum();
        if diff < min {
            if diff == 0 {
                return index as u8;
            }
            min = diff;
            closest = index;
        }
    }

    closest as u8
}

pub const COLORS: [u8x4; 256] = [
    u8x4::from_array([0x00, 0x00, 0x00, 0x0]),
    u8x4::from_array([0x80, 0x00, 0x00, 0x0]),
    u8x4::from_array([0x00, 0x80, 0x00, 0x0]),
    u8x4::from_array([0x80, 0x80, 0x00, 0x0]),
    u8x4::from_array([0x00, 0x00, 0x80, 0x0]),
    u8x4::from_array([0x80, 0x00, 0x80, 0x0]),
    u8x4::from_array([0x00, 0x80, 0x80, 0x0]),
    u8x4::from_array([0xc0, 0xc0, 0xc0, 0x0]),
    u8x4::from_array([0x80, 0x80, 0x80, 0x0]),
    u8x4::from_array([0xff, 0x00, 0x00, 0x0]),
    u8x4::from_array([0x00, 0xff, 0x00, 0x0]),
    u8x4::from_array([0xff, 0xff, 0x00, 0x0]),
    u8x4::from_array([0x00, 0x00, 0xff, 0x0]),
    u8x4::from_array([0xff, 0x00, 0xff, 0x0]),
    u8x4::from_array([0x00, 0xff, 0xff, 0x0]),
    u8x4::from_array([0xff, 0xff, 0xff, 0x0]),
    u8x4::from_array([0x00, 0x00, 0x00, 0x0]),
    u8x4::from_array([0x00, 0x00, 0x5f, 0x0]),
    u8x4::from_array([0x00, 0x00, 0x87, 0x0]),
    u8x4::from_array([0x00, 0x00, 0xaf, 0x0]),
    u8x4::from_array([0x00, 0x00, 0xd7, 0x0]),
    u8x4::from_array([0x00, 0x00, 0xff, 0x0]),
    u8x4::from_array([0x00, 0x5f, 0x00, 0x0]),
    u8x4::from_array([0x00, 0x5f, 0x5f, 0x0]),
    u8x4::from_array([0x00, 0x5f, 0x87, 0x0]),
    u8x4::from_array([0x00, 0x5f, 0xaf, 0x0]),
    u8x4::from_array([0x00, 0x5f, 0xd7, 0x0]),
    u8x4::from_array([0x00, 0x5f, 0xff, 0x0]),
    u8x4::from_array([0x00, 0x87, 0x00, 0x0]),
    u8x4::from_array([0x00, 0x87, 0x5f, 0x0]),
    u8x4::from_array([0x00, 0x87, 0x87, 0x0]),
    u8x4::from_array([0x00, 0x87, 0xaf, 0x0]),
    u8x4::from_array([0x00, 0x87, 0xd7, 0x0]),
    u8x4::from_array([0x00, 0x87, 0xff, 0x0]),
    u8x4::from_array([0x00, 0xaf, 0x00, 0x0]),
    u8x4::from_array([0x00, 0xaf, 0x5f, 0x0]),
    u8x4::from_array([0x00, 0xaf, 0x87, 0x0]),
    u8x4::from_array([0x00, 0xaf, 0xaf, 0x0]),
    u8x4::from_array([0x00, 0xaf, 0xd7, 0x0]),
    u8x4::from_array([0x00, 0xaf, 0xff, 0x0]),
    u8x4::from_array([0x00, 0xd7, 0x00, 0x0]),
    u8x4::from_array([0x00, 0xd7, 0x5f, 0x0]),
    u8x4::from_array([0x00, 0xd7, 0x87, 0x0]),
    u8x4::from_array([0x00, 0xd7, 0xaf, 0x0]),
    u8x4::from_array([0x00, 0xd7, 0xd7, 0x0]),
    u8x4::from_array([0x00, 0xd7, 0xff, 0x0]),
    u8x4::from_array([0x00, 0xff, 0x00, 0x0]),
    u8x4::from_array([0x00, 0xff, 0x5f, 0x0]),
    u8x4::from_array([0x00, 0xff, 0x87, 0x0]),
    u8x4::from_array([0x00, 0xff, 0xaf, 0x0]),
    u8x4::from_array([0x00, 0xff, 0xd7, 0x0]),
    u8x4::from_array([0x00, 0xff, 0xff, 0x0]),
    u8x4::from_array([0x5f, 0x00, 0x00, 0x0]),
    u8x4::from_array([0x5f, 0x00, 0x5f, 0x0]),
    u8x4::from_array([0x5f, 0x00, 0x87, 0x0]),
    u8x4::from_array([0x5f, 0x00, 0xaf, 0x0]),
    u8x4::from_array([0x5f, 0x00, 0xd7, 0x0]),
    u8x4::from_array([0x5f, 0x00, 0xff, 0x0]),
    u8x4::from_array([0x5f, 0x5f, 0x00, 0x0]),
    u8x4::from_array([0x5f, 0x5f, 0x5f, 0x0]),
    u8x4::from_array([0x5f, 0x5f, 0x87, 0x0]),
    u8x4::from_array([0x5f, 0x5f, 0xaf, 0x0]),
    u8x4::from_array([0x5f, 0x5f, 0xd7, 0x0]),
    u8x4::from_array([0x5f, 0x5f, 0xff, 0x0]),
    u8x4::from_array([0x5f, 0x87, 0x00, 0x0]),
    u8x4::from_array([0x5f, 0x87, 0x5f, 0x0]),
    u8x4::from_array([0x5f, 0x87, 0x87, 0x0]),
    u8x4::from_array([0x5f, 0x87, 0xaf, 0x0]),
    u8x4::from_array([0x5f, 0x87, 0xd7, 0x0]),
    u8x4::from_array([0x5f, 0x87, 0xff, 0x0]),
    u8x4::from_array([0x5f, 0xaf, 0x00, 0x0]),
    u8x4::from_array([0x5f, 0xaf, 0x5f, 0x0]),
    u8x4::from_array([0x5f, 0xaf, 0x87, 0x0]),
    u8x4::from_array([0x5f, 0xaf, 0xaf, 0x0]),
    u8x4::from_array([0x5f, 0xaf, 0xd7, 0x0]),
    u8x4::from_array([0x5f, 0xaf, 0xff, 0x0]),
    u8x4::from_array([0x5f, 0xd7, 0x00, 0x0]),
    u8x4::from_array([0x5f, 0xd7, 0x5f, 0x0]),
    u8x4::from_array([0x5f, 0xd7, 0x87, 0x0]),
    u8x4::from_array([0x5f, 0xd7, 0xaf, 0x0]),
    u8x4::from_array([0x5f, 0xd7, 0xd7, 0x0]),
    u8x4::from_array([0x5f, 0xd7, 0xff, 0x0]),
    u8x4::from_array([0x5f, 0xff, 0x00, 0x0]),
    u8x4::from_array([0x5f, 0xff, 0x5f, 0x0]),
    u8x4::from_array([0x5f, 0xff, 0x87, 0x0]),
    u8x4::from_array([0x5f, 0xff, 0xaf, 0x0]),
    u8x4::from_array([0x5f, 0xff, 0xd7, 0x0]),
    u8x4::from_array([0x5f, 0xff, 0xff, 0x0]),
    u8x4::from_array([0x87, 0x00, 0x00, 0x0]),
    u8x4::from_array([0x87, 0x00, 0x5f, 0x0]),
    u8x4::from_array([0x87, 0x00, 0x87, 0x0]),
    u8x4::from_array([0x87, 0x00, 0xaf, 0x0]),
    u8x4::from_array([0x87, 0x00, 0xd7, 0x0]),
    u8x4::from_array([0x87, 0x00, 0xff, 0x0]),
    u8x4::from_array([0x87, 0x5f, 0x00, 0x0]),
    u8x4::from_array([0x87, 0x5f, 0x5f, 0x0]),
    u8x4::from_array([0x87, 0x5f, 0x87, 0x0]),
    u8x4::from_array([0x87, 0x5f, 0xaf, 0x0]),
    u8x4::from_array([0x87, 0x5f, 0xd7, 0x0]),
    u8x4::from_array([0x87, 0x5f, 0xff, 0x0]),
    u8x4::from_array([0x87, 0x87, 0x00, 0x0]),
    u8x4::from_array([0x87, 0x87, 0x5f, 0x0]),
    u8x4::from_array([0x87, 0x87, 0x87, 0x0]),
    u8x4::from_array([0x87, 0x87, 0xaf, 0x0]),
    u8x4::from_array([0x87, 0x87, 0xd7, 0x0]),
    u8x4::from_array([0x87, 0x87, 0xff, 0x0]),
    u8x4::from_array([0x87, 0xaf, 0x00, 0x0]),
    u8x4::from_array([0x87, 0xaf, 0x5f, 0x0]),
    u8x4::from_array([0x87, 0xaf, 0x87, 0x0]),
    u8x4::from_array([0x87, 0xaf, 0xaf, 0x0]),
    u8x4::from_array([0x87, 0xaf, 0xd7, 0x0]),
    u8x4::from_array([0x87, 0xaf, 0xff, 0x0]),
    u8x4::from_array([0x87, 0xd7, 0x00, 0x0]),
    u8x4::from_array([0x87, 0xd7, 0x5f, 0x0]),
    u8x4::from_array([0x87, 0xd7, 0x87, 0x0]),
    u8x4::from_array([0x87, 0xd7, 0xaf, 0x0]),
    u8x4::from_array([0x87, 0xd7, 0xd7, 0x0]),
    u8x4::from_array([0x87, 0xd7, 0xff, 0x0]),
    u8x4::from_array([0x87, 0xff, 0x00, 0x0]),
    u8x4::from_array([0x87, 0xff, 0x5f, 0x0]),
    u8x4::from_array([0x87, 0xff, 0x87, 0x0]),
    u8x4::from_array([0x87, 0xff, 0xaf, 0x0]),
    u8x4::from_array([0x87, 0xff, 0xd7, 0x0]),
    u8x4::from_array([0x87, 0xff, 0xff, 0x0]),
    u8x4::from_array([0xaf, 0x00, 0x00, 0x0]),
    u8x4::from_array([0xaf, 0x00, 0x5f, 0x0]),
    u8x4::from_array([0xaf, 0x00, 0x87, 0x0]),
    u8x4::from_array([0xaf, 0x00, 0xaf, 0x0]),
    u8x4::from_array([0xaf, 0x00, 0xd7, 0x0]),
    u8x4::from_array([0xaf, 0x00, 0xff, 0x0]),
    u8x4::from_array([0xaf, 0x5f, 0x00, 0x0]),
    u8x4::from_array([0xaf, 0x5f, 0x5f, 0x0]),
    u8x4::from_array([0xaf, 0x5f, 0x87, 0x0]),
    u8x4::from_array([0xaf, 0x5f, 0xaf, 0x0]),
    u8x4::from_array([0xaf, 0x5f, 0xd7, 0x0]),
    u8x4::from_array([0xaf, 0x5f, 0xff, 0x0]),
    u8x4::from_array([0xaf, 0x87, 0x00, 0x0]),
    u8x4::from_array([0xaf, 0x87, 0x5f, 0x0]),
    u8x4::from_array([0xaf, 0x87, 0x87, 0x0]),
    u8x4::from_array([0xaf, 0x87, 0xaf, 0x0]),
    u8x4::from_array([0xaf, 0x87, 0xd7, 0x0]),
    u8x4::from_array([0xaf, 0x87, 0xff, 0x0]),
    u8x4::from_array([0xaf, 0xaf, 0x00, 0x0]),
    u8x4::from_array([0xaf, 0xaf, 0x5f, 0x0]),
    u8x4::from_array([0xaf, 0xaf, 0x87, 0x0]),
    u8x4::from_array([0xaf, 0xaf, 0xaf, 0x0]),
    u8x4::from_array([0xaf, 0xaf, 0xd7, 0x0]),
    u8x4::from_array([0xaf, 0xaf, 0xff, 0x0]),
    u8x4::from_array([0xaf, 0xd7, 0x00, 0x0]),
    u8x4::from_array([0xaf, 0xd7, 0x5f, 0x0]),
    u8x4::from_array([0xaf, 0xd7, 0x87, 0x0]),
    u8x4::from_array([0xaf, 0xd7, 0xaf, 0x0]),
    u8x4::from_array([0xaf, 0xd7, 0xd7, 0x0]),
    u8x4::from_array([0xaf, 0xd7, 0xff, 0x0]),
    u8x4::from_array([0xaf, 0xff, 0x00, 0x0]),
    u8x4::from_array([0xaf, 0xff, 0x5f, 0x0]),
    u8x4::from_array([0xaf, 0xff, 0x87, 0x0]),
    u8x4::from_array([0xaf, 0xff, 0xaf, 0x0]),
    u8x4::from_array([0xaf, 0xff, 0xd7, 0x0]),
    u8x4::from_array([0xaf, 0xff, 0xff, 0x0]),
    u8x4::from_array([0xd7, 0x00, 0x00, 0x0]),
    u8x4::from_array([0xd7, 0x00, 0x5f, 0x0]),
    u8x4::from_array([0xd7, 0x00, 0x87, 0x0]),
    u8x4::from_array([0xd7, 0x00, 0xaf, 0x0]),
    u8x4::from_array([0xd7, 0x00, 0xd7, 0x0]),
    u8x4::from_array([0xd7, 0x00, 0xff, 0x0]),
    u8x4::from_array([0xd7, 0x5f, 0x00, 0x0]),
    u8x4::from_array([0xd7, 0x5f, 0x5f, 0x0]),
    u8x4::from_array([0xd7, 0x5f, 0x87, 0x0]),
    u8x4::from_array([0xd7, 0x5f, 0xaf, 0x0]),
    u8x4::from_array([0xd7, 0x5f, 0xd7, 0x0]),
    u8x4::from_array([0xd7, 0x5f, 0xff, 0x0]),
    u8x4::from_array([0xd7, 0x87, 0x00, 0x0]),
    u8x4::from_array([0xd7, 0x87, 0x5f, 0x0]),
    u8x4::from_array([0xd7, 0x87, 0x87, 0x0]),
    u8x4::from_array([0xd7, 0x87, 0xaf, 0x0]),
    u8x4::from_array([0xd7, 0x87, 0xd7, 0x0]),
    u8x4::from_array([0xd7, 0x87, 0xff, 0x0]),
    u8x4::from_array([0xd7, 0xaf, 0x00, 0x0]),
    u8x4::from_array([0xd7, 0xaf, 0x5f, 0x0]),
    u8x4::from_array([0xd7, 0xaf, 0x87, 0x0]),
    u8x4::from_array([0xd7, 0xaf, 0xaf, 0x0]),
    u8x4::from_array([0xd7, 0xaf, 0xd7, 0x0]),
    u8x4::from_array([0xd7, 0xaf, 0xff, 0x0]),
    u8x4::from_array([0xd7, 0xd7, 0x00, 0x0]),
    u8x4::from_array([0xd7, 0xd7, 0x5f, 0x0]),
    u8x4::from_array([0xd7, 0xd7, 0x87, 0x0]),
    u8x4::from_array([0xd7, 0xd7, 0xaf, 0x0]),
    u8x4::from_array([0xd7, 0xd7, 0xd7, 0x0]),
    u8x4::from_array([0xd7, 0xd7, 0xff, 0x0]),
    u8x4::from_array([0xd7, 0xff, 0x00, 0x0]),
    u8x4::from_array([0xd7, 0xff, 0x5f, 0x0]),
    u8x4::from_array([0xd7, 0xff, 0x87, 0x0]),
    u8x4::from_array([0xd7, 0xff, 0xaf, 0x0]),
    u8x4::from_array([0xd7, 0xff, 0xd7, 0x0]),
    u8x4::from_array([0xd7, 0xff, 0xff, 0x0]),
    u8x4::from_array([0xff, 0x00, 0x00, 0x0]),
    u8x4::from_array([0xff, 0x00, 0x5f, 0x0]),
    u8x4::from_array([0xff, 0x00, 0x87, 0x0]),
    u8x4::from_array([0xff, 0x00, 0xaf, 0x0]),
    u8x4::from_array([0xff, 0x00, 0xd7, 0x0]),
    u8x4::from_array([0xff, 0x00, 0xff, 0x0]),
    u8x4::from_array([0xff, 0x5f, 0x00, 0x0]),
    u8x4::from_array([0xff, 0x5f, 0x5f, 0x0]),
    u8x4::from_array([0xff, 0x5f, 0x87, 0x0]),
    u8x4::from_array([0xff, 0x5f, 0xaf, 0x0]),
    u8x4::from_array([0xff, 0x5f, 0xd7, 0x0]),
    u8x4::from_array([0xff, 0x5f, 0xff, 0x0]),
    u8x4::from_array([0xff, 0x87, 0x00, 0x0]),
    u8x4::from_array([0xff, 0x87, 0x5f, 0x0]),
    u8x4::from_array([0xff, 0x87, 0x87, 0x0]),
    u8x4::from_array([0xff, 0x87, 0xaf, 0x0]),
    u8x4::from_array([0xff, 0x87, 0xd7, 0x0]),
    u8x4::from_array([0xff, 0x87, 0xff, 0x0]),
    u8x4::from_array([0xff, 0xaf, 0x00, 0x0]),
    u8x4::from_array([0xff, 0xaf, 0x5f, 0x0]),
    u8x4::from_array([0xff, 0xaf, 0x87, 0x0]),
    u8x4::from_array([0xff, 0xaf, 0xaf, 0x0]),
    u8x4::from_array([0xff, 0xaf, 0xd7, 0x0]),
    u8x4::from_array([0xff, 0xaf, 0xff, 0x0]),
    u8x4::from_array([0xff, 0xd7, 0x00, 0x0]),
    u8x4::from_array([0xff, 0xd7, 0x5f, 0x0]),
    u8x4::from_array([0xff, 0xd7, 0x87, 0x0]),
    u8x4::from_array([0xff, 0xd7, 0xaf, 0x0]),
    u8x4::from_array([0xff, 0xd7, 0xd7, 0x0]),
    u8x4::from_array([0xff, 0xd7, 0xff, 0x0]),
    u8x4::from_array([0xff, 0xff, 0x00, 0x0]),
    u8x4::from_array([0xff, 0xff, 0x5f, 0x0]),
    u8x4::from_array([0xff, 0xff, 0x87, 0x0]),
    u8x4::from_array([0xff, 0xff, 0xaf, 0x0]),
    u8x4::from_array([0xff, 0xff, 0xd7, 0x0]),
    u8x4::from_array([0xff, 0xff, 0xff, 0x0]),
    u8x4::from_array([0x08, 0x08, 0x08, 0x0]),
    u8x4::from_array([0x12, 0x12, 0x12, 0x0]),
    u8x4::from_array([0x1c, 0x1c, 0x1c, 0x0]),
    u8x4::from_array([0x26, 0x26, 0x26, 0x0]),
    u8x4::from_array([0x30, 0x30, 0x30, 0x0]),
    u8x4::from_array([0x3a, 0x3a, 0x3a, 0x0]),
    u8x4::from_array([0x44, 0x44, 0x44, 0x0]),
    u8x4::from_array([0x4e, 0x4e, 0x4e, 0x0]),
    u8x4::from_array([0x58, 0x58, 0x58, 0x0]),
    u8x4::from_array([0x62, 0x62, 0x62, 0x0]),
    u8x4::from_array([0x6c, 0x6c, 0x6c, 0x0]),
    u8x4::from_array([0x76, 0x76, 0x76, 0x0]),
    u8x4::from_array([0x80, 0x80, 0x80, 0x0]),
    u8x4::from_array([0x8a, 0x8a, 0x8a, 0x0]),
    u8x4::from_array([0x94, 0x94, 0x94, 0x0]),
    u8x4::from_array([0x9e, 0x9e, 0x9e, 0x0]),
    u8x4::from_array([0xa8, 0xa8, 0xa8, 0x0]),
    u8x4::from_array([0xb2, 0xb2, 0xb2, 0x0]),
    u8x4::from_array([0xbc, 0xbc, 0xbc, 0x0]),
    u8x4::from_array([0xc6, 0xc6, 0xc6, 0x0]),
    u8x4::from_array([0xd0, 0xd0, 0xd0, 0x0]),
    u8x4::from_array([0xda, 0xda, 0xda, 0x0]),
    u8x4::from_array([0xe4, 0xe4, 0xe4, 0x0]),
    u8x4::from_array([0xee, 0xee, 0xee, 0x0]),
];

lazy_static! {
    pub static ref FG_COLOR: [String; 256] = (0..256)
        .map(|i| format!("{ESC}38;5;{:}m", i))
        .collect::<Vec<String>>()
        .try_into()
        .unwrap();
    pub static ref BG_COLOR: [String; 256] = (0..256)
        .map(|i| format!("{ESC}[48;5;{:}m", i))
        .collect::<Vec<String>>()
        .try_into()
        .unwrap();
    pub static ref NUM_CHAR: [String; 256] = (0..256)
        .map(|i| format!("{i}"))
        .collect::<Vec<String>>()
        .try_into()
        .unwrap();
}
